#!/usr/bin/env python3

from functools import reduce
from sys import stdin, stdout, stderr, argv

indent = '  '
attributes = []
model = stdin.read()
class_name = argv[1]
should_override_equality = argv[2] == 'y' if len(argv) >= 3 else False
output = 'import \'dart:convert\';\n\nclass %s {\n%sconst %s({\n' % (class_name, indent, class_name)

for line in model.splitlines():
    declaration = line.split(':')
    
    if len(declaration) != 2:
        continue
    
    prop = declaration[0].strip()
    dataType = declaration[1].strip()
    isNullable = dataType.endswith('?')
    
    attributes.append({
        'prop': prop,
        'dataType': dataType,
        'isNullable': isNullable,
        'propInMap': reduce(lambda x, y: x + ('_' if y.isupper() else '') + y, prop).lower(),
    })

for attribute in attributes:
    output += '%s%s' % (indent, indent)
    
    if not attribute['isNullable']:
        output += 'required '
    
    output += 'this.%s,\n' % (attribute['prop'],)

output += '%s});\n' % (indent,)

for attribute in attributes:
    output += '\n%sfinal %s %s;' % (indent, attribute['dataType'], attribute['prop'])

output += '\n\n%sfactory %s.fromMap(Map<String, dynamic> map) {' % (indent, class_name,)

output += '\n%s%sreturn %s(' % (indent, indent, class_name)

for attribute in attributes:
    output += '\n%s%s%s%s: map[\'%s\'],' % (indent, indent, indent, attribute['prop'], attribute['propInMap'])

output += '\n%s%s);' % (indent, indent)

output += '\n%s}' % (indent,)

output += '\n\n%sfactory %s.fromJson(String json) =>\n%s%s%s%s.fromMap(jsonDecode(json));' % (indent, class_name, indent, indent, indent, class_name)

output += '\n\n%sMap<String, dynamic> toMap() {' % (indent,)

output += '\n%s%sreturn {' % (indent, indent)

for attribute in attributes:
    output += '\n%s%s%s\'%s\': %s,' % (indent, indent, indent, attribute['propInMap'], attribute['prop'])

output += '\n%s%s};' % (indent, indent)

output += '\n%s}' % (indent,)

output += '\n\n%sString toJson() => jsonEncode(toMap());' % (indent,)

output += '\n\n%s%s copyWith({' % (indent, class_name)

for attribute in attributes:
    output += '\n%s%s' % (indent, indent)
    
    if attribute['isNullable']:
        output += attribute['dataType']
    else:
        output += '%s?' % (attribute['dataType'],)
    
    output += ' %s,' % (attribute['prop'],)

output += '\n%s}) {' % (indent,)

output += '\n%s%sreturn %s(' % (indent, indent, class_name)

for attribute in attributes:
    output += '\n%s%s%s%s: %s ?? this.%s,' % (indent, indent, indent, attribute['prop'], attribute['prop'], attribute['prop'])
    
output += '\n%s%s);' % (indent, indent)

output += '\n%s}' % (indent,)

if should_override_equality:
    buffer = []
    
    output += '\n\n%s@override' % (indent,)

    output += '\n%sint get hashCode => ' % (indent,)

    for attribute in attributes:
       buffer.append('%s.hashCode' % (attribute['prop'],))

    output += '%s;' % (' ^ '.join(buffer),)

    buffer = []
    
    output += '\n\n%s@override' % (indent,)
    
    output += '\n%sbool operator ==(Object other) =>' % (indent,)
    
    output += '\n%s%s%sidentical(this, other) ||' % (indent, indent, indent)
    
    output += '\n%s%s%sother is %s' % (indent, indent, indent, class_name)
    
    output += ' &&\n%s%s%s%s%s%s == other.%s' % (indent, indent, indent, indent, indent, 'runtimeType', 'runtimeType')
    
    if len(attributes) > 0:
        output += ' &&\n'
        
        for attribute in attributes:
            buffer.append('%s%s%s%s%s%s == other.%s' % (indent, indent, indent, indent, indent, attribute['prop'], attribute['prop']))
            
        output += ' &&\n'.join(buffer)
        buffer = []
    
    output += ';'


stdout.write('%s\n}\n' % (output,))

